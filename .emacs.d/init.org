#+title: My emacs settings
#+auto_tangle: t

* Table of Contents :TOC:
- [[#basic-setup][Basic setup]]
  - [[#early-init][Early Init]]
  - [[#font][Font]]
  - [[#init][Init]]
  - [[#setup-package-manager][Setup package manager]]
  - [[#auto-tangle-config][Auto-tangle config]]
  - [[#prompts][Prompts]]
  - [[#warnings][Warnings]]
  - [[#emacs-files][Emacs files]]
  - [[#escape-to-quit-prompts][Escape to quit prompts]]
  - [[#benchmark-init][Benchmark init]]
- [[#editor][Editor]]
  - [[#undo-tree][Undo Tree]]
  - [[#vim-keybindings][Vim keybindings]]
- [[#lines][Lines]]
  - [[#tabs][Tabs]]
  - [[#scroll][Scroll]]
  - [[#whitspaces][Whitspaces]]
  - [[#focus][Focus]]
  - [[#multiple-cursors][Multiple Cursors]]
- [[#visuals][Visuals]]
  - [[#theme][Theme]]
  - [[#icons][Icons]]
  - [[#modeline][Modeline]]
  - [[#fringe][Fringe]]
  - [[#flymake][Flymake]]
- [[#ide][IDE]]
  - [[#auto-close-pairs][Auto close pairs]]
  - [[#languages][Languages]]
  - [[#lsp][LSP]]
  - [[#autosuggestion-and-completion][Autosuggestion and Completion]]
  - [[#dap][DAP]]
  - [[#direnv][Direnv]]
  - [[#recent-files][Recent files]]
  - [[#zen-mode]["Zen Mode"]]
  - [[#save-emacs-state][Save emacs state]]
  - [[#cursor-position][Cursor position]]
  - [[#search-and-navigation][Search and Navigation]]
  - [[#tab-line][Tab Line]]
  - [[#tab-bar][Tab Bar]]
  - [[#whitespaces][Whitespaces]]
  - [[#http-server][HTTP Server]]
- [[#window][Window]]
  - [[#winner-mode][Winner Mode]]
- [[#git][Git]]
  - [[#magit][Magit]]
  - [[#diff-highlight][Diff Highlight]]
  - [[#blamer][Blamer]]
- [[#workspaces][Workspaces]]
- [[#keybindings][Keybindings]]
  - [[#which-key][Which Key]]
- [[#integrated-terminal][Integrated Terminal]]
  - [[#vterm][Vterm]]
- [[#file-manager][File Manager]]
  - [[#dired][Dired]]
  - [[#treemacs][TreeMacs]]
- [[#buffers][Buffers]]
  - [[#file-buffers][File buffers]]
  - [[#minibuffer][Minibuffer]]
- [[#org-mode][Org Mode]]
  - [[#auto-fill][Auto fill]]
  - [[#fold-drawer][Fold drawer]]
  - [[#refile][Refile]]
  - [[#habit][Habit]]
  - [[#priority][Priority]]
  - [[#tables][Tables]]
  - [[#todos][TODOs]]
  - [[#visuals-1][Visuals]]
  - [[#org-capture][Org Capture]]
  - [[#org-roam][Org Roam]]
  - [[#org-roam-ui][Org Roam UI]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-present][Org Present]]
  - [[#org-drill][Org Drill]]
  - [[#org-alert][Org Alert]]
  - [[#toc-org][TOC ORG]]
- [[#social][Social]]
  - [[#telegram][Telegram]]
  - [[#matrix][Matrix]]
- [[#news][News]]
  - [[#rss][RSS]]
- [[#pdf][PDF]]
  - [[#pdf-tools][pdf-tools]]
- [[#eww][EWW]]
  - [[#wrap-lines-instead-of-truncating][Wrap lines instead of truncating]]

* Basic setup

** Early Init

#+property: header-args:emacs-lisp :tangle ~/.emacs.d/early-init.el

Hides startup message, scroll bar and tool bar.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

No annoying bell sound nor flashing lights when something goes wrong.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (blink-cursor-mode 0)
  (setq ring-bell-function 'ignore) ; this is actually sound, but...
#+end_src

Set default theme before loading doom themes.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  ;;(load-theme 'modus-vivendi)
#+end_src

#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

** Font

Increase default font size

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (set-face-attribute 'default nil :height 140)
  (when (eq system-type 'darwin)
    (set-face-attribute 'default nil :height 160))
#+end_src

** Init

Launch in fullscreen.

#+begin_src emacs-lisp
  (toggle-frame-fullscreen)
#+end_src

** Setup package manager

For many of the following settings I'll need to install some packages, so its best to have it configured upfront.

Note: if you get 404 when trying to install packages, run ~M-x package-refresh-contents~.

*** Setup MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

*** Setup use-package

#+begin_src emacs-lisp
  (eval-when-compile (require 'use-package))
  (setq use-package-always-ensure t)
#+end_src

** Auto-tangle config

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Prompts

*** Y or N instead of Yes or No

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** TODO Warnings

Disable annoying warnings at startup.

TODO: check all available levels

#+begin_src emacs-lisp
  ;;(setq warning-minimum-level :emergency)
#+end_src

** Emacs files

Emacs creates a bunch of annoying files.

*** Disable lock files

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

*** Emacs directories

#+begin_src emacs-lisp
  (setq user-emacs-directory "~/.cache/emacs/")
  (when (not (file-directory-p user-emacs-directory))
    (make-directory user-emacs-directory))

  (setq make-backup-files nil)
#+end_src

*** Auto-save files

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
    `((".*" "~/.cache/emacs/" t)))
#+end_src
*** Custom variables file

This way I can build init.el from init.org without loosing custom variables.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
#+end_src

** Escape to quit prompts

Press escape to quit most prompts.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Benchmark init

I was getting very bad startup times so I added this just to be sure.

#+begin_src emacs-lisp
  (use-package esup
    :defer
    :config
    (setq esup-depth 0))
#+end_src

* Editor

Basic editor settings. For more advanced tools see [[#ide][IDE]].

** Undo Tree

~C-x u~ launches the undo tree visualization.

#+begin_src emacs-lisp
  (use-package undo-tree
    :demand t
    :config
    (when (not (file-directory-p "~/.emacs.d/undotree"))
      (make-directory "~/.emacs.d/undotree"))
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undotree")))
    (setq evil-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

** Vim keybindings

*** Evil Mode

evil mode and evil-collection provide vim-like bindings.

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :custom
    (evil-want-integration t)
    (evil-want-C-u-scroll t)
    (evil-want-keybinding nil) ; what? idk
    ;;(evil-want-minibuffer t)
    (evil-undo-system 'undo-tree)
    (evil-cross-lines t)
    :bind
    (:map evil-normal-state-map
          ("SPC u" . universal-argument))
    :config
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Evil Surround

Like you surround.

#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src

*** Keychord

I only use it to map ~jk~ to ~<Escape>~.

#+begin_src emacs-lisp
  (use-package key-chord
    :after evil
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.2)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

* Lines

Show column number.

#+begin_src emacs-lisp
  (column-number-mode 1) ;; TODO
#+end_src

Absolute line numbers for insert state and relative for others.

#+begin_src emacs-lisp
  (use-package emacs
	:hook ((evil-insert-state-entry
			. (lambda ()
				(setq display-line-numbers-type t)
				(display-line-numbers-mode 1)))
		   (evil-insert-state-exit
			. (lambda ()
				(setq display-line-numbers-type 'relative)
				(display-line-numbers-mode 1)))))
#+end_src

Enable line numbers for some modes.

#+begin_src emacs-lisp
  (use-package emacs
    :hook ((text-mode
            prog-mode
            conf-mode) . display-line-numbers-mode))
#+end_src

Wrap long lines.

#+begin_src emacs-lisp
  ;;(global-visual-line-mode 1)
#+end_src

Truncate long lines.

#+begin_src emacs-lisp
  (set-default 'truncate-lines t)
#+end_src

Automatically break line wider than 80 cols.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src

** Tabs

#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src

Indent wrapped lines.

#+begin_src emacs-lisp
  ;;(add-hook 'visual-line-mode 'adaptive-wrap-prefix-mode)
#+end_src

** Scroll

I don't know how to explain this shit.
But it improves scrolling for sure.

TODO: check what each settings do.

#+begin_src emacs-lisp
  ;; (setq scroll-step 1)
  ;; (setq scroll-margin 1)
  ;; (setq scroll-conservatively 1000)
  ;; (setq scroll-preserve-screen-position 1)
#+end_src

** TODO Whitspaces

*** TODO Highlight trailing whitespaces

TODO: add other modes

#+begin_src emacs-lisp
  (add-hook 'prog-mode '(setq show-trailing-whitespace t))
#+end_src

*** TODO Show symbols for spaces and tabs
TODO: show a symbol like ~>~ for tab and ~â€¢~, ideally in visual mode.

** Focus

Makes only the current area highlighted.

#+begin_src emacs-lisp
  (use-package focus :defer)
#+end_src

** TODO Multiple Cursors

#+begin_src emacs-lisp
  (use-package evil-mc :defer)
#+end_src

* Visuals

** Theme

*** Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :defer 0.3
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-one t))
#+end_src

** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  ;; run once
  ;;(all-the-icons-install-fonts t)
  ;;(nerd-icons-install-fonts t)
#+end_src

** Modeline

*** Doom Modeline
Nicer modeline.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :defer 1
    :config (doom-modeline-mode 1))
#+end_src

** Fringe

#+begin_src emacs-lisp
  (fringe-mode 8)
#+end_src


** Flymake

#+begin_src emacs-lisp
  (use-package sideline-flymake
    :hook (flymake-mode . sideline-mode)
    :init
    (setq sideline-flymake-display-mode 'line)
    (setq sideline-backends-right '(sideline-flymake)))
#+end_src

* IDE

** Auto close pairs

Auto close pairs like '',"", [ ], { }, depending on the file type.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Languages
*** Go

#+begin_src emacs-lisp
  (use-package go-mode
    :defer
    :hook
    (go-mode . eglot-ensure))
#+end_src

Tool for adding/removing struct tags.

#+begin_src emacs-lisp
  (use-package go-tag :defer)
#+end_src

*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode :defer)
#+end_src

*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode :defer)
#+end_src

*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode :defer)
#+end_src

*** Python

#+begin_src emacs-lisp
  (use-package emacs
    :hook (python-mode . eglot-ensure))
#+end_src

*** XML

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq nxml-child-indent 4)
    (setq nxml-attribute-indent 4))
#+end_src

*** TODO Vue

*** TODO JavaScript
** LSP

*** Eglot

Eglot is a builtin LSP client for emacs.

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (before-save . (lambda ()
                     (when (eglot-managed-p)
                       (eglot-format))))

    :bind
    (:map evil-normal-state-map
          ("gi" . eglot-find-implementation)
          ("SPC l r" . eglot-rename)
          ("SPC l R" . eglot-reconnect)
          ("SPC l a a" . eglot-code-actions)
          ("SPC l a e" . eglot-code-action-extract))
    :init
    (setq eglot-sync-connect nil) ;; do not block when loading lsp


    ;; TODO
    (add-hook 'before-save-hook
              (lambda ()
                (call-interactively 'eglot-code-action-organize-imports))
              t nil))
#+end_src

*** Eldoc and Eldoc box

Show docs as a hover box instead of using echo area.

#+begin_src emacs-lisp
  (use-package eldoc-box
      :config
      (eldoc-box-hover-at-point-mode 1)
      (setq eldoc-echo-area-use-multiline-p 1)
      (advice-add 'eldoc-doc-buffer :override 'eldoc-box-help-at-point))

#+end_src

** Autosuggestion and Completion

*** Corfu

Emacs supports completion builtin with ~C-M-i~, but for a VSCode-like completion I use corfu.
You can still use ~C-M-i~ to launch corfu.

#+begin_src emacs-lisp
  (use-package corfu
    :config
    (setq corfu-auto nil)
    (setq corfu-preview-current nil)
    (setq corfu-auto-delay 0.2)
    (setq corfu-auto-prefix 1)
    (setq corfu-cycle t)
    (global-set-key (kbd "C-SPC") #'completion-at-point)
    (global-corfu-mode 1))
#+end_src

*** Cape

Completion-at-point extensions.

#+begin_src emacs-lisp
  (use-package cape
    :init
    (dolist (mode '(text-mode-hook
                    prog-mode-hook
                    conf-mode-hook))
      (add-hook mode (lambda ()
                       (add-to-list 'completion-at-point-functions #'cape-tex)
                       (add-to-list 'completion-at-point-functions #'cape-emoji)
                       (add-to-list 'completion-at-point-functions #'cape-file)))))
#+end_src

** TODO DAP

#+begin_src emacs-lisp
  (use-package dap-mode)



  (advice-add 'org-drill-time-to-inactive-org-timestamp :override
              (lambda (time)
                "Convert TIME into org-mode timestamp."
                (format-time-string
                 (concat "[" (cdr org-time-stamp-formats) "]")
                 time)))
#+end_src

** Direnv

#+begin_src emacs-lisp
  (use-package direnv
    ;; :config
    ;; (direnv-mode)
    )
#+end_src
** Recent files

Show recent files with ~C-x C-r~.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 100)
  (setq recentf-max-saved-items 100)
  (global-set-key "\C-x\ \C-r" 'recentf-open)
#+end_src

** "Zen Mode"

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :init
    (setq visual-fill-column-center-text t)
    (setq visual-fill-column-width 110)
    :hook ((prog-mode eww-mode text-mode conf-mode) . visual-fill-column-mode))
#+end_src

** Save emacs state

Save session when emacs is closed and restore when reopened.

#+begin_src emacs-lisp
  ;;(desktop-save-mode 1)
#+end_src

** Cursor position

Save cursor position per file.

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

** Search and Navigation

#+begin_src emacs-lisp
  (use-package consult
    :defer
    :bind
    (:map evil-normal-state-map
          ("SPC g s" . consult-grep)))
#+end_src

** Tab Line

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq tab-line-switch-cycling t)
    :bind
    (:map evil-normal-state-map
          ("SPC SPC k" . kill-this-buffer)
          ("SPC SPC l" . tab-line-switch-to-next-tab)
          ("SPC SPC h" . tab-line-switch-to-prev-tab)))
#+end_src

** Tab Bar

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq tab-bar-tab-hints t)
    :bind
    (:map evil-normal-state-map
          ("gc" . tab-bar-close-tab)
          ("gn" . tab-bar-new-tab)
          ("gh" . tab-bar-switch-to-prev-tab)
          ("gl" . tab-bar-switch-to-next-tab)))
#+end_src

** Whitespaces

#+begin_src emacs-lisp
  (use-package whitespace
    :hook
    ((prog-mode conf-mode) . whitespace-mode)
    :config
    (setq whitespace-style '(face tabs spaces trailing space-mark tab-mark)))
#+end_src

** HTTP Server

#+begin_src emacs-lisp
  (use-package simple-httpd)
#+end_src
* Window

** Winner Mode

Winner Mode can undo and redo window changes, like opening and closing.

#+begin_src emacs-lisp
  (use-package emacs
    :bind
    (:map evil-normal-state-map
          ("C-w u" . winner-undo)
          ("C-w C-r" . winner-redo))
    :config
    (winner-mode 1))
#+end_src


* Git

** Magit

I use the default ~C-x g~ binding.

TODO: hook to file save

#+begin_src emacs-lisp
  (use-package magit :defer)
#+end_src

** Diff Highlight

TODO: hook to magit

#+begin_src emacs-lisp
  (use-package diff-hl
    :defer 1
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :init
    (global-diff-hl-mode 1))
#+end_src

** Blamer

Blamer shows a git blame similar to GitLens in VSCode.

#+begin_src emacs-lisp
  (use-package blamer :defer)
#+end_src

* Workspaces

** COMMENT Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :bind
    (:map evil-normal-state-map
          ("SPC SPC p" . persp-mode)
          ("SPC SPC s" . persp-switch)
          ("SPC SPC l" . persp-next)
          ("SPC SPC h" . persp-prev)))
#+end_src

* Keybindings

** Which Key

~whick-key~ suggests key combinations as you press them.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+end_src

* Integrated Terminal

** Vterm

#+begin_src emacs-lisp
  (use-package vterm
    :ensure nil
    :defer
    :init
    (define-key evil-normal-state-map (kbd "SPC t") 'vterm))
#+end_src

* File Manager
** Dired

Automatically update dired when a file is changed.

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** TreeMacs

File tree on the left side.

#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (setq treemacs-width 40)
    :bind
    (:map global-map
	  ([f8] . treemacs)))
#+end_src

* Buffers

** File buffers

Refreshs file automatically when its changed by other program. Also refreshes dired.

#+begin_src emacs-lisp
  (use-package emacs
    :bind
    (:map evil-normal-state-map
          (("gb" . evil-switch-to-windows-last-buffer)))
    :config
    (global-auto-revert-mode 1))

#+end_src

Use ibuffer instead of list-buffers.

#+begin_src emacs-lisp
  (use-package emacs
    :bind ("C-x C-b" . ibuffer))
#+end_src

** Minibuffer

*** Persist minibuffers

Persist minibuffers history, like in ~M-x~, ~C-x C-f~ and so on.

#+begin_src emacs-lisp
  (savehist-mode 1)
  (setq history-length 100)
#+end_src

*** Vertico

Improves minibuffer by showing multiple options in a vertical list.

#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode)
    (vertico-mouse-mode)
    (setq vertico-count 20)
    (setq vertico-cycle t)

    :bind
    (:map vertico-map
          ("C-j" . vertico-next)
          ("C-k" . vertico-previous)))
#+end_src

Make vertico appear at the center of the screen.

#+begin_src emacs-lisp
  (use-package vertico-posframe
    :config (vertico-posframe-mode))
#+end_src

*** Marginalia

- Adds description for commands in ~M-x~
- Adds extra info to find file
- Adds extra info to ~C-h v~

#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

*** Orderless

Provides fuzzy search for files, commands, variables, and so on.

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* Org Mode

** Auto fill

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . auto-fill-mode))
#+end_src

** Fold drawer

#+begin_src emacs-lisp
  (defun my/org-fold-hide-drawer-all ()
    (interactive)
    (org-fold-hide-drawer-all))
#+end_src

** Refile

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-directory "~/Git/Org"))

  ;; (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Habit

#+begin_src emacs-lisp
  (use-package org
    :config
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60))
#+end_src


** Priority

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-priority-highest 0)
    (setq org-priority-lowest 5)
    (setq org-priority-default 5))
#+end_src

** Tables

#+begin_src emacs-lisp
  (use-package org
    :bind
    (:map org-mode-map
          ("C-c h" . org-table-move-cell-left)
          ("C-c l" . org-table-move-cell-right)
          ("C-c k" . org-table-move-cell-up)
          ("C-c j" . org-table-move-cell-down)))
#+end_src

** TODOs

#+begin_src emacs-lisp
  (use-package org
    :config
    ;;(setq org-log-done 'item)
    (setq org-hierarchical-todo-statistics nil) ;; TODO recursive by default
    (setq org-todo-keywords
          '((sequence "TODO" "|" "DONE"))))
#+end_src

** Visuals

Show headings with special bullets instead o asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

Visually indent text inside headings.

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . org-indent-mode))
#+end_src

Change title and heading sizes.

#+begin_src emacs-lisp
  (defvar my/org-big-fonts '((org-document-title . 1.8)
                             (org-level-1 . 1.6)
                             (org-level-2 . 1.4)
                             (org-level-3 . 1.2)))
  (defun my/org-big ()
    (interactive)
    (dolist (face my/org-big-fonts)
      (set-face-attribute (car face) nil :height (cdr face))))

  (defun my/org-smol ()
    (interactive)
    (dolist (face my/org-big-fonts)
      (set-face-attribute (car face) nil :height 1.0)))
#+end_src

Whether to hide or not symbols for emphasis like ~a~, *b*, /c/...

#+begin_src emacs-lisp
 (setq org-hide-emphasis-markers nil)
#+end_src

Replace ~-~ by ~â€¢~ on unordered lists.

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
      '(("^ *\\([-]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+end_src

** Org Capture

#+begin_src emacs-lisp
  (use-package org
    :bind
    (:map global-map
          ("C-c c" . org-capture))
    :config
    (setq org-capture-templates
          '(("t"
             "todo item"
             entry
             (file+headline org-default-notes-file "Tasks")
             "* TODO %?\n"))))
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :defer
    :config
    (when (not (file-directory-p "~/Git/Org/Roam"))
      (make-directory "~/Git/Org/Roam"))
    (setq org-roam-directory "~/Git/Org/Roam")

    (org-roam-db-autosync-enable)

    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n d d" . org-roam-dailies-goto-today)
     ("C-c n d y" . org-roam-dailies-goto-yesterday)
     ("C-c n d t" . org-roam-dailies-goto-tomorrow)))
#+end_src

** Org Roam UI

Visualize Roam graph in real time.

#+begin_src emacs-lisp
  (use-package org-roam-ui :defer)
#+end_src


** Org Agenda

#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-scheduled-past-days 0)
    (setq org-agenda-start-day "-5d")
    (setq org-agenda-span 20)
    (setq org-agenda-show-all-dates nil)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-deadline-warning-days 0)
    (setq org-agenda-files
          '("tasks.org"))
    (setq org-agenda-custom-commands
          '(("d" "Today"
             ((agenda "" ((org-agenda-span 'day)
                          (org-agenda-start-day "0d")
                          (org-deadline-warning-days 3)))))))

    ;; default:
    ;; (setq org-agenda-prefix-format
    ;; 		'((agenda . " %i %-12:c%?-12t% s")
    ;; 		 (todo . " %i %-12:c")
    ;; 		 (tags . " %i %-12:c")
    ;; 		 (search . " %i %-12:c")))
    (setq org-agenda-prefix-format
          '((agenda . " %?-12t% s")
            (todo . " ")
            (tags . " ")
            (search . " ")))
    :bind
    (:map global-map
          ("C-c a" . org-agenda)
          ("C-'" . org-cycle-agenda-files)))
#+end_src

** Org Present

#+begin_src emacs-lisp
  (use-package org-present
    :defer
    :hook ((org-present-mode
            . (lambda ()
                (org-present-hide-cursor)
				(setq display-line-numbers-type nil)
                (display-line-numbers-mode 1)))
           (org-present-mode-quit
            . (lambda ()
                (org-present-show-cursor)
				(setq display-line-numbers-type 'relative)
                (display-line-numbers-mode 1)))))
#+end_src

** Org Drill

#+begin_src emacs-lisp
  (use-package org-drill
    :config
    (add-to-list 'org-modules 'org-drill))
#+end_src

** Org Alert

#+begin_src emacs-lisp
  (use-package org-alert
    :config
    (setq alert-default-style 'notifications)
    (when (eq system-type 'darwin)
      (setq alert-default-style 'osx-notifier))
    (setq org-alert-interval (* 5 60))
    (setq org-alert-notify-cutoff 60)
    (setq org-alert-notify-after-event-cutoff 5)
    (setq org-alert-notification-title "ORG AGENDA")
    (org-alert-enable))
#+end_src

** TOC ORG

Generate a table-of-contents automatically.

#+begin_src emacs-lisp
  (use-package toc-org
    :hook
    (org-mode . toc-org-mode))
#+end_src

* Social

** Telegram

#+begin_src emacs-lisp
  (use-package telega
    :ensure nil ;; installed and built through nix
    :init
    (setq telega-emoji-use-images nil))
#+end_src

** Matrix

#+begin_src emacs-lisp
  (use-package ement :defer)
#+end_src

* News

** RSS

#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (setq elfeed-feeds
          '(
            ;; DHH
            "https://world.hey.com/dhh/feed.atom" 
            ;; Martin Fowler
            "https://martinfowler.com/feed.atom" 
            ;; Go Blog
            "https://go.dev/blog/feed.atom" 
            ;; ThePrimeTime
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" 
            ;; Mental Outlaw
            "https://www.youtube.com/feeds/videos.xml?channel_id=UC7YOGHUfC1Tb6E4pudI9STA" 
            ;; Fireship
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" 
            ;; Lakka News
            "https://www.lakka.tv/articles/feed.xml" 
            )))
#+end_src

*** TODO org-elfeed

* PDF

** pdf-tools

I tried default emacs doc-view-mode but it didn't work with the PDFs I tested.

Installing pdf-tools and opening a PDF file just works here.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src

* EWW

** Wrap lines instead of truncating 

#+begin_src emacs-lisp
  (use-package emacs
    :hook (eww-mode . visual-line-mode))
#+end_src
