#+title: My emacs settings
#+auto_tangle: t

* Table of Contents :TOC:
- [[#config][Config]]
  - [[#early-init][Early Init]]
  - [[#setup-melpa][Setup MELPA]]
  - [[#setup-use-package][Setup use-package]]
  - [[#auto-tangle-config][Auto-tangle config]]
  - [[#y-or-n-instead-of-yes-or-no-prompts][Y or N instead of Yes or No prompts]]
  - [[#dont-show-warnings-only-errors][Don't show warnings, only errors]]
  - [[#disable-lock-files][Disable lock files]]
  - [[#emacs-directories][Emacs directories]]
  - [[#disable-backup-files][Disable backup files]]
  - [[#auto-save-files][Auto-save files]]
  - [[#customization-information-file][Customization information file]]
  - [[#benchmark-init][Benchmark init]]
  - [[#treat-underline-as-part-of-the-word][Treat underline as part of the word]]
  - [[#show-column-number-in-modeline][Show column number in modeline]]
  - [[#show-line-numbers][Show line numbers]]
  - [[#absolute-and-relative-line-numbers][Absolute and relative line numbers]]
  - [[#truncate-long-lines][Truncate long lines]]
  - [[#indent-using-4-spaces][Indent using 4 spaces]]
  - [[#refresh-buffers-on-change][Refresh buffers on change]]
  - [[#use-ibuffer-builtin-instead-of-list-buffers][Use =ibuffer= (builtin) instead of list-buffers.]]
  - [[#persist-minibuffers-history][Persist minibuffer's history]]
  - [[#display-date-time-and-battery-in-modeline][Display date, time and battery in modeline]]
  - [[#evil-mode---vim-mode-emulation][=evil-mode= - vim mode emulation]]
  - [[#evil-surround---surround-text-with-parenthesis-quotes-and-so-on][=evil-surround= - surround text with parenthesis, quotes, and so on]]
  - [[#key-chord---time-based-keymaps-for-evil][=key-chord= - time-based keymaps for evil]]
  - [[#hl-line-mode---highlight-current-line][=hl-line-mode= - highlight current line]]
  - [[#all-the-icons--all-the-icons-dired---icon-packages][=all-the-icons= + =all-the-icons-dired= - icon packages]]
  - [[#doom-themes---nice-themes][=doom-themes= - nice themes]]
  - [[#doom-modeline---nice-modeline][=doom-modeline= - nice modeline]]
  - [[#breadcrumb---summary-of-your-cursor-position][=breadcrumb= - summary of your cursor position]]
  - [[#flymake-builtin---syntax-checking][=flymake= (builtin) - syntax checking]]
  - [[#eletrict-pair-mode-builtin---auto-close-pairs-based-on-mode][=eletrict-pair-mode= (builtin) - auto close pairs based on mode]]
  - [[#projectel-builtin---managing-projects][=project.el= (builtin) - managing projects]]
  - [[#go-mode---go-support][=go-mode= - Go support]]
  - [[#go-tag---automatically-addingremoving-struct-tags][=go-tag= - automatically adding/removing struct tags]]
  - [[#nix-mode---nix-support][=nix-mode= - Nix support]]
  - [[#yaml-mode---yaml-support][=yaml-mode= - YAML support]]
  - [[#markdown-mode---markdown-support][=markdown-mode= - Markdown support]]
  - [[#python-mode-builtin---python-support][=python-mode= (builtin) - Python support]]
  - [[#nxml-mode-builtin---xml-support][=nxml-mode= (builtin) - XML support]]
  - [[#vue-mode---vue-support][=vue-mode= - Vue support]]
  - [[#c-mode-builtin---cc-support][=c-mode= (builtin) - C/C++ support]]
  - [[#eglot-builtin---lsp-client][=eglot= (builtin) - LSP client]]
  - [[#eldoc-builtin---showing-documentation-of-symbols][=eldoc= (builtin) - showing documentation of symbols]]
  - [[#eldoc-box---eldoc-in-a-box-below-cursor][=eldoc-box= - eldoc in a box below cursor]]
  - [[#corfu---completion-popup-like-vs-codes][=corfu= - completion popup like VS Code's]]
  - [[#envrc---direnv-integration][=envrc= - direnv integration]]
  - [[#recentf-mode---persistent-history-of-recent-files][=recentf-mode= - persistent history of recent files]]
  - [[#olivetti---horizontal-paddings-for-windows][=olivetti= - horizontal paddings for windows]]
  - [[#save-place-mode---save-cursor-position-per-file][=save-place-mode= - save cursor position per file]]
  - [[#consult---multiple-search-utilities][=consult= - multiple search utilities]]
  - [[#tab-line-builtin---show-buffers-as-tabs][=tab-line= (builtin) - show buffers as tabs]]
  - [[#tab-bar-builtin---tabs-like-vim][=tab-bar= (builtin) - tabs like vim]]
  - [[#whitespace-builtin---show-whitespaces-as-symbols][=whitespace= (builtin) - show whitespaces as symbols]]
  - [[#restclient---http-client][=restclient= - http client]]
  - [[#simple-httpd---static-http-server][=simple-httpd= - static http server]]
  - [[#winner-mode-builtin---undoredo-window-changes][=winner-mode= (builtin) - undo/redo window changes]]
  - [[#dired-builtin---file-manager][=dired= (builtin) - file manager]]
  - [[#dired-subtree---add-subt-tree-view-to-dired][=dired-subtree= - add subt tree view to dired]]
  - [[#magit---git-interface][=magit= - git interface]]
  - [[#diff-hl---highlight-uncommited-changes][=diff-hl= - highlight uncommited changes]]
  - [[#blamer-mode---git-blame-like-gitlens][=blamer-mode= - git blame like gitlens]]
  - [[#whick-key---suggests-key-combinations-as-you-press-them][=whick-key= - suggests key combinations as you press them.]]
  - [[#vterm---integrated-terminal][=vterm= - integrated terminal]]
  - [[#vertico---vertical-completion][=vertico= - vertical completion]]
  - [[#vertico-posframe---make-vertico-appear-as-a-floating-window][=vertico-posframe= - make vertico appear as a floating window]]
  - [[#marginalia---show-more-data-for-help-functions][=marginalia= - show more data for help functions]]
  - [[#orderless---fuzzy-completion][=orderless= - fuzzy completion]]
  - [[#auto-fill-mode-builtin---automatically-break-long-lines][=auto-fill-mode= (builtin) - automatically break long lines]]
  - [[#emms---music-player][=emms= - music player]]
  - [[#telega---telegram-client][=telega= - telegram client]]
  - [[#elfeed---client-for-atom-and-rss-feeds][=elfeed= - client for Atom and RSS feeds]]
  - [[#pdf-tools---read-pdfs-in-emacs][=pdf-tools= - read PDFs in emacs]]
  - [[#eww-builtin---simple-browser][=eww= (builtin) - simple browser]]
  - [[#activity-watch-mode---track-emacs-usage-using-activitywatch][=activity-watch-mode= - track emacs usage using ActivityWatch]]
- [[#org-config][Org Config]]
  - [[#org-directory][Org directory]]
  - [[#org-source-block---open-in-the-same-window][Org source block - open in the same window]]
  - [[#org-indirect-buffer---open-in-the-same-window][Org indirect buffer - open in the same window]]
  - [[#org-refile---save-all-buffers][Org refile - save all buffers]]
  - [[#org-priority---face-and-default-value][Org priority - face and default value]]
  - [[#org-tags---column][Org tags - column]]
  - [[#org-todos---keywords-and-state-logging][Org TODOs - keywords and state logging]]
  - [[#org-clock---keybindings][Org Clock - keybindings]]
  - [[#org-capture---templates][Org Capture - templates]]
  - [[#org-lists---replace---by--on-unordered-lists][Org lists - Replace ~-~ by ~•~ on unordered lists.]]
  - [[#org-agenda---setup-and-custom-views][Org Agenda - setup and custom views]]
  - [[#org-agenda---notifications-for-events][Org Agenda - notifications for events]]
  - [[#org-present---make-presentations-using-org-mode][=org-present= - make presentations using org mode]]
  - [[#org-drill---same-idea-as-anki][=org-drill= - same idea as Anki]]
  - [[#toc-org---generate-table-of-contents][=toc-org= - generate table of contents]]
  - [[#org-music---manage-songs-and-playlists-using-org][=org-music= - manage songs and playlists using org]]
  - [[#org-indent-mode-builtin---visually-indent-text-inside-headings][=org-indent-mode= (builtin) - visually indent text inside headings]]
  - [[#org-appear---show-emphasis-markers-when-cursor-is-over-the-word][=org-appear= - show emphasis markers when cursor is over the word.]]
  - [[#org-fragtog---display-latex-automatically-inside-org-buffers][=org-fragtog= - display LaTeX automatically inside org buffers]]
  - [[#org-roam---org-knowledge-management-system][=org-roam= - org knowledge management system]]
  - [[#org-roam-ui---visualize-org-roam-graph-in-real-time][=org-roam-ui= - visualize Org Roam graph in real time.]]

* Config
** Early Init

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Hides startup message, scroll bar and tool bar.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

No annoying bell sound nor flashing lights when something goes wrong.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (blink-cursor-mode 0)
  (setq ring-bell-function 'ignore)
#+end_src

Set default theme before loading doom themes.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  ;;(load-theme 'modus-vivendi)
#+end_src

Increase default font size.

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (set-face-attribute 'default nil :height 140)
#+end_src

#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

** COMMENT Frame

Launch in fullscreen.

#+begin_src emacs-lisp
  (toggle-frame-fullscreen)
#+end_src

** Setup MELPA

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+end_src

** Setup use-package

#+begin_src emacs-lisp
  (eval-when-compile (require 'use-package))
  (setq use-package-always-ensure t)
#+end_src

** Auto-tangle config

Automatically generate =init.el= and =early-init.el= when I save this file.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Y or N instead of Yes or No prompts

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Don't show warnings, only errors

#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src

** Disable lock files

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Emacs directories

#+begin_src emacs-lisp
  (setq user-emacs-directory "~/.emacs.d/")
#+end_src

** Disable backup files

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** TODO Auto-save files

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
    `((".*" "~/.cache/emacs/" t)))
#+end_src
** Customization information file

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
#+end_src

** COMMENT Escape to quit prompts

Press escape to quit most prompts.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Benchmark init

I was getting very bad startup times so I added this just to be sure.

#+begin_src emacs-lisp
  (use-package esup
    :defer
    :config
    (setq esup-depth 0))
#+end_src

** COMMENT General for keybindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer general-leader
      :states ('normal 'visual)
      :keymaps 'override
      :prefix "SPC"))
#+end_src

** Treat underline as part of the word

#+begin_src emacs-lisp
  (use-package emacs
    :hook ((prog-mode
            text-mode
            conf-mode)
           . (lambda ()
               (modify-syntax-entry ?_ "w"))))
#+end_src

** Show column number in modeline

#+begin_src emacs-lisp
  (column-number-mode 1)
#+end_src

** Show line numbers

Enable line numbers for some modes.

#+begin_src emacs-lisp
  (use-package emacs
    :hook ((text-mode
            prog-mode
            conf-mode) . display-line-numbers-mode))
#+end_src

** Absolute and relative line numbers

Show absolute line numbers for insert state and relative for others.

#+begin_src emacs-lisp
  (use-package emacs
    :after evil
    :hook ((evil-insert-state-entry
            . (lambda ()
                (setq display-line-numbers-type t)
                (display-line-numbers-mode 1)))
           (evil-insert-state-exit
            . (lambda ()
                (setq display-line-numbers-type 'relative)
                (display-line-numbers-mode 1)))))
#+end_src

** Truncate long lines

#+begin_src emacs-lisp
  (set-default 'truncate-lines t)
#+end_src

** Indent using 4 spaces

#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src

** Refresh buffers on change

Refreshs file automatically when its changed by other program.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-auto-revert-mode 1))
#+end_src

** Use =ibuffer= (builtin) instead of list-buffers.

#+begin_src emacs-lisp
  (use-package emacs
    :bind ("C-x C-b" . ibuffer))
#+end_src

** Persist minibuffer's history

In ~M-x~, ~C-x C-f~ and so on.

#+begin_src emacs-lisp
  (savehist-mode 1)
  (setq history-length 100)
#+end_src

** Display date, time and battery in modeline

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq display-time-day-and-date t)
    (setq display-time-format "%a %H:%M %d/%m")
    (setq display-time-default-load-average nil)
    (display-time-mode 1)
    (display-battery-mode 1))
#+end_src

** =evil-mode= - vim mode emulation

evil mode and evil-collection provide vim-like bindings.

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :custom
    (evil-want-integration t)
    (evil-want-C-u-scroll t)
    (evil-want-keybinding nil) ; what? idk
    ;;(evil-want-minibuffer t)
    (evil-undo-system 'undo-redo)
    (evil-cross-lines t)
    :bind
    (:map evil-normal-state-map
          ("SPC u" . universal-argument)
          ("H" . previous-buffer)
          ("L" . next-buffer))
    :config
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** =evil-surround= - surround text with parenthesis, quotes, and so on

Works exactly like you-surround.

#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src

** =key-chord= - time-based keymaps for evil

I only use it to map ~jk~ to ~<Escape>~, aka switch to normal mode.

#+begin_src emacs-lisp
  (use-package key-chord
    :after evil
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.2)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

** COMMENT =focus-mode= - highlight only the current area

#+begin_src emacs-lisp
  (use-package focus :defer)
#+end_src

** =hl-line-mode= - highlight current line

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-hl-line-mode 1))
#+end_src

** COMMENT =evil-mc= - multiple cursors like VSCode

#+begin_src emacs-lisp
  (use-package evil-mc :defer)
#+end_src

** =all-the-icons= + =all-the-icons-dired= - icon packages

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  ;; run once
  ;;(all-the-icons-install-fonts t)
  ;;(nerd-icons-install-fonts t)
#+end_src

** =doom-themes= - nice themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :defer 0.3
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-one t))
#+end_src

** =doom-modeline= - nice modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :defer 1
    :config
    (setq doom-modeline-buffer-name nil)
    (setq doom-modeline-buffer-encoding nil)
    (doom-modeline-mode 1))
#+end_src

** =breadcrumb= - summary of your cursor position

Tells you in what "component" and which file you are.
Like =init.org : Config > breacrumb=.

#+begin_src emacs-lisp
  (use-package breadcrumb
    :hook
    ((prog-mode
      conf-mode
      text-mode
      vterm-mode)
     . breadcrumb-local-mode))
#+end_src

** COMMENT =fringe-mode= (builtin)

#+begin_src emacs-lisp
  (fringe-mode 8)
#+end_src

** =flymake= (builtin) - syntax checking

#+begin_src emacs-lisp
  (use-package sideline-flymake
    :hook (flymake-mode . sideline-mode)
    :init
    (setq sideline-flymake-display-mode 'line)
    (setq sideline-backends-right '(sideline-flymake)))
#+end_src

** =eletrict-pair-mode= (builtin) - auto close pairs based on mode

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** =project.el= (builtin) - managing projects

Helps you manage projects based on version control systems, like
git repos. Check =C-x p p=.

Launch vterm in the project's root directory.

#+begin_src emacs-lisp
  (defun project-vterm ()
    (interactive)
    (let* ((proj-dir (car (last (project-current))))
           (proj-name (file-name-nondirectory
                       (directory-file-name "~/Git/backend/")))
           (chosen-name (read-string "buffer name: " proj-name))
           (default-directory proj-dir))
      (vterm (format "vterm - %s" chosen-name))))
#+end_src

Customize project.el commands.

#+begin_src emacs-lisp

  (use-package project
    :preface
    :config
    (setq project-switch-commands
          '((project-find-file "Find file" ?f)
            (project-find-regexp "Find regexp" ?g)
            (project-find-dir "Find directory" ?d)
            (project-vterm "vterm" ?t)
            ;;(project-vc-dir "VC-Dir")
            ;;(project-eshell "Eshell")
            ;;(project-any-command "Other")
            (magit-project-status "Magit" ?m))))
#+end_src

** =go-mode= - Go support

#+begin_src emacs-lisp
  (use-package go-mode
    :defer
    :hook
    (go-mode . eglot-ensure))
#+end_src

** =go-tag= - automatically adding/removing struct tags

#+begin_src emacs-lisp
  (use-package go-tag :defer)
#+end_src

** =nix-mode= - Nix support
#+begin_src emacs-lisp
  (use-package nix-mode :defer)
#+end_src

** =yaml-mode= - YAML support
#+begin_src emacs-lisp
  (use-package yaml-mode :defer)
#+end_src

** =markdown-mode= - Markdown support
#+begin_src emacs-lisp
  (use-package markdown-mode :defer)
#+end_src

** =python-mode= (builtin) - Python support

#+begin_src emacs-lisp
  (use-package emacs
    :hook (python-mode . eglot-ensure))
#+end_src

** =nxml-mode= (builtin) - XML support

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq nxml-child-indent 4)
    (setq nxml-attribute-indent 4))
#+end_src

** =vue-mode= - Vue support

#+begin_src emacs-lisp
  (use-package vue-mode)
#+end_src

** =c-mode= (builtin) - C/C++ support

#+begin_src emacs-lisp
  (use-package emacs
    :hook (c-mode . (lambda ()
                      (setq c-basic-offset 2)
                      (setq indent-tabs-mode nil))))
#+end_src

** COMMENT =javascript-mode=
** =eglot= (builtin) - LSP client

Eglot is a builtin LSP (Language Server Protocol) client for emacs.

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    ;; before saving, if eglot is enabled, try to format and organize imports
    (before-save
     . (lambda ()
         (when (bound-and-true-p eglot-managed-p)
           (call-interactively 'eglot-format)
           (call-interactively 'eglot-code-action-organize-imports))))

    :bind
    (:map evil-normal-state-map
          ("gi" . eglot-find-implementation)
          ("SPC l r" . eglot-rename)
          ("SPC l R" . eglot-reconnect)
          ("SPC l a a" . eglot-code-actions)
          ("SPC l a e" . eglot-code-action-extract))
    :init
    ;; do not block when loading lsp
    (setq eglot-sync-connect nil))
#+end_src

** =eldoc= (builtin) - showing documentation of symbols

It also retrieves data from =eglot=.

#+begin_src emacs-lisp
    (use-package emacs
      :config
      (setq eldoc-echo-area-use-multiline-p 1))
#+end_src

** =eldoc-box= - eldoc in a box below cursor

I use eldoc-box to show docs as a hover box instead of using echo area.

#+begin_src emacs-lisp
  (use-package eldoc-box
      :config
      (eldoc-box-hover-at-point-mode 1)
      (advice-add 'eldoc-doc-buffer :override 'eldoc-box-help-at-point))
#+end_src

** =corfu= - completion popup like VS Code's

#+begin_src emacs-lisp
  (use-package corfu
    :hook ((text-mode prog-mode conf-mode) . corfu-mode)
    :config
    (setq corfu-auto nil)
    (setq corfu-preview-current nil)
    (setq corfu-auto-delay 0.2)
    (setq corfu-auto-prefix 1)
    (setq corfu-cycle t)
    (corfu-popupinfo-mode 1)
    :bind
    (:map global-map
          ("C-SPC" . completion-at-point)))
#+end_src

** COMMENT =cape=

Completion-at-point extensions.

#+begin_src emacs-lisp
  (use-package cape
    :init
    (dolist (mode '(text-mode-hook
                    prog-mode-hook
                    conf-mode-hook))
      (add-hook mode (lambda ()
                       (add-to-list 'completion-at-point-functions #'cape-tex)
                       (add-to-list 'completion-at-point-functions #'cape-emoji)
                       (add-to-list 'completion-at-point-functions #'cape-file)))))
#+end_src

** COMMENT =dap-mode=

#+begin_src emacs-lisp
  (use-package dap-mode)
#+end_src

** =envrc= - direnv integration

Works better than =direnv-mode= for me.

#+begin_src emacs-lisp
  (use-package envrc
    :config
    (envrc-global-mode))
#+end_src

** =recentf-mode= - persistent history of recent files

Show recent files with ~C-x C-r~.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 100)
  (setq recentf-max-saved-items 100)
  (global-set-key "\C-x\ \C-r" 'recentf-open)
#+end_src

** =olivetti= - horizontal paddings for windows

#+begin_src emacs-lisp
  (use-package olivetti
    :hook ((prog-mode
            eww-mode
            text-mode
            conf-mode
            org-agenda-mode)
           . olivetti-mode)
    :init
    (setq-default olivetti-body-width 100))
#+end_src

*** COMMENT interesting

  (defun ews-distraction-free ()
    "Distraction-free writing environment using Olivetti package."
    (interactive)
    (if (equal olivetti-mode nil)
        (progn
          (window-configuration-to-register 1)
          (delete-other-windows)
          (text-scale-set 2)
          (olivetti-mode t))
      (progn
        (if (eq (length (window-list)) 1)
            (jump-to-register 1))
        (olivetti-mode 0)
        (text-scale-set 0))))

  (use-package olivetti
    :demand t
    :bind
    (("<f9>" . ews-distraction-free)))

** COMMENT =desktop-save-mode= - restore last session when opening emacs

#+begin_src emacs-lisp
  (desktop-save-mode 1)
#+end_src

** =save-place-mode= - save cursor position per file

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

** =consult= - multiple search utilities

#+begin_src emacs-lisp
  (use-package consult
    :defer
    :bind
    (:map evil-normal-state-map
          ;; analogous to project-find-regexp
          ("SPC p g" . consult-git-grep)

          ;; analogous to project-find-file
          ("SPC p f" . consult-project-buffer)

          ;; buffer errors
          ("SPC b e" . consult-flymake)

          ;; buffer definitions
          ("SPC b d" . consult-imenu)))
#+end_src

** =tab-line= (builtin) - show buffers as tabs

It works per window, showing the recent buffers you opened in that window.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq tab-line-switch-cycling t))
#+end_src

** =tab-bar= (builtin) - tabs like vim

I use it just to make 2 or 3 different "window layouts" and switch
between them

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq tab-bar-show nil))
#+end_src

** =whitespace= (builtin) - show whitespaces as symbols

#+begin_src emacs-lisp
  (use-package whitespace
    :hook
    ((prog-mode conf-mode) . whitespace-mode)
    :config
    (setq whitespace-style '(face tabs spaces trailing space-mark tab-mark)))
#+end_src

** =restclient= - http client

#+begin_src emacs-lisp
  (use-package restclient :defer t)
#+end_src

** =simple-httpd= - static http server

#+begin_src emacs-lisp
  (use-package simple-httpd :defer t)
#+end_src

** COMMENT =yasnippet= - templates/snippets

Package for creating snippets.

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-define-snippets
     'go-mode
     '(("iferr" "if err != nil {\n\treturn err${1:}\n}")
       ("iferr2" "if err != nil {\n\treturn nil${1:}, err${2:}\n}")
       ("lv" "log.Printf(\"%#v\", ${1:})")))

    (yas-define-snippets
     'org-mode
     '(("#el" "#+begin_src emacs-lisp\n${1:}\n#+end_src\n")
       ("#mus" "** ${1:}\n:PROPERTIES:\n:TYPE: song\n:END:\n")))

    (yas-global-mode 1)
    :bind
    (:map yas-minor-mode-map
          ("<tab>" . yas-expand)
          ("C-SPC" . yas-next-field-or-maybe-expand)))
#+end_src

** =winner-mode= (builtin) - undo/redo window changes

#+begin_src emacs-lisp
  (use-package emacs
    :bind
    (:map evil-normal-state-map
          ("C-w u" . winner-undo)
          ("C-w C-r" . winner-redo))
    :config
    (winner-mode 1))
#+end_src

** =dired= (builtin) - file manager

Automatically update dired when a file is changed.

#+begin_src emacs-lisp
  (use-package emacs
    :hook
    (dired-mode . dired-hide-details-mode)
    :config
    (setq global-auto-revert-non-file-buffers t)
    :bind
    (:map dired-mode-map
          ("S-TAB" . dired-find-file-other-window)))
#+end_src

** =dired-subtree= - add subt tree view to dired

#+begin_src emacs-lisp
  (use-package dired-subtree
      :config
      :bind
      (:map dired-mode-map
            ("TAB" . dired-subtree-toggle)))
#+end_src

** =magit= - git interface

I use the default ~C-x g~ binding.

#+begin_src emacs-lisp
  (use-package magit :defer)
#+end_src

** =diff-hl= - highlight uncommited changes

#+begin_src emacs-lisp
  (use-package diff-hl
    :defer 1
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh)
           (after-save . diff-hl-update))
    :init
    (global-diff-hl-mode 1))
#+end_src

** =blamer-mode= - git blame like gitlens

#+begin_src emacs-lisp
  (use-package blamer :defer)
#+end_src

** COMMENT Perspective

#+begin_src emacs-lisp
  (use-package persp-mode
    :bind
    (:map evil-normal-state-map
          ("SPC SPC p" . persp-mode)
          ("SPC SPC s" . persp-switch)
          ("SPC SPC l" . persp-next)
          ("SPC SPC h" . persp-prev)))
#+end_src

** =whick-key= - suggests key combinations as you press them.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+end_src

** =vterm= - integrated terminal

Launch vterm with a custom buffer name.

#+begin_src emacs-lisp
  (defun my/vterm (name)
    (interactive "sname: ")
    (vterm (concat "vterm - " name)))
#+end_src

#+begin_src emacs-lisp
  (use-package vterm
    :ensure nil
    :defer
    :bind
    (:map evil-normal-state-map
          (("SPC t" . my/vterm))))
#+end_src

** =vertico= - vertical completion

Improves minibuffer by showing multiple options in a vertical list.

#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode)
    (vertico-mouse-mode)
    (setq vertico-count 20)
    (setq vertico-cycle t)
    (setq vertico-sort-function #'vertico-sort-history-alpha)

    :bind
    (:map vertico-map
          ("C-j" . vertico-next)
          ("C-k" . vertico-previous)))
#+end_src

** =vertico-posframe= - make vertico appear as a floating window

#+begin_src emacs-lisp
  (use-package vertico-posframe
    :config (vertico-posframe-mode))
#+end_src

** =marginalia= - show more data for help functions

- Adds description for commands in ~M-x~
- Adds extra info to find file
- Adds extra info to ~C-h v~

#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

** =orderless= - fuzzy completion

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** =auto-fill-mode= (builtin) - automatically break long lines

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . auto-fill-mode))
#+end_src

** =emms= - music player

#+begin_src emacs-lisp
  (use-package emms
    :config
    (emms-all)
    (emms-default-players)
    :bind
    (:map evil-normal-state-map
          ("SPC m j" . emms-next)
          ("SPC m k" . emms-previous)
          ("SPC m h" . emms-seek-backward)
          ("SPC m l" . emms-seek-forward)
          ("SPC m SPC" . emms-pause)
          ("SPC m s" . emms-stop)
          ("SPC m e" . emms)))
#+end_src

** =telega= - telegram client

#+begin_src emacs-lisp
  (use-package telega
    :ensure nil ;; installed and built through nix
    :init
    (setq telega-emoji-use-images nil))
#+end_src

** =elfeed= - client for Atom and RSS feeds

#+begin_src emacs-lisp
  (use-package elfeed
    :defer
    :config
    (setq elfeed-feeds
          '(
            ;; DHH
            "https://world.hey.com/dhh/feed.atom" 
            ;; Martin Fowler
            "https://martinfowler.com/feed.atom" 
            ;; Go Blog
            "https://go.dev/blog/feed.atom" 
            ;; ThePrimeTime
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" 
            ;; Mental Outlaw
            "https://www.youtube.com/feeds/videos.xml?channel_id=UC7YOGHUfC1Tb6E4pudI9STA" 
            ;; Fireship
            "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" 
            ;; Lakka News
            "https://www.lakka.tv/articles/feed.xml" 
            )))
#+end_src

*** TODO org-elfeed

** =pdf-tools= - read PDFs in emacs

I tried default emacs doc-view-mode but it didn't work with the PDFs I tested.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer
    :config
    (pdf-tools-install))
#+end_src

** =eww= (builtin) - simple browser

Wrap lines instead of truncating

#+begin_src emacs-lisp
  (use-package emacs
    :hook (eww-mode . visual-line-mode))
#+end_src

** =activity-watch-mode= - track emacs usage using [[https://activitywatch.net][ActivityWatch]]

#+begin_src emacs-lisp
  (use-package activity-watch-mode
    :config
    (global-activity-watch-mode 1))
#+end_src

** COMMENT Matrix

#+begin_src emacs-lisp
  (use-package ement :defer)
#+end_src


** COMMENT EXWM

#+begin_src emacs-lisp
  (use-package exwm
	:hook
	((exwm-init . (lambda ()
					(exwm-workspace-switch-create 1)))
	 (exwm-update-class . (lambda ()
							(exwm-workspace-rename-buffer exwm-class-name)))
	 ;; (exwm-manage-finish . (lambda ()
	 ;;                         (exwm-input-set-local-simulation-keys '([?\s-j] . [down]))))
	 )

	:config
	;; Set the default number of workspaces
	(setq exwm-workspace-number 10)
	(setq exwm-systemtray-height 32)

	(setq exwm-input-simulation-keys
		  '(
			;; ([?\s-h] . [left])
			;; ([?\s-l] . [right])
			([?\s-k] . [up])
			([?\s-j] . [down])
			;; ([?0] . [home])
			;; ([?$] . [end])
			([?\C-\s-u] . [prior])
			([?\C-\s-d] . [next])
			;; ([?x] . [delete])
			;; ([?D] . [S-end delete])
			))

	;; When window "class" updates, use it to set the buffer name
	;; (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)


	;; These keys should always pass through to Emacs
	(setq exwm-input-prefix-keys
		  '(?\C-x
			?\C-u
			?\C-w
			?\C-h
			?\M-x
			?\M-`
			?\M-&
			?\M-:
			?\C-\M-j  ;; Buffer list
			?\C-\ ))  ;; Ctrl+Space

	;; Ctrl+Q will enable the next key to be sent directly
	(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

	;; Set up global key bindings.  These always work, no matter the input state!
	;; Keep in mind that changing this list after EXWM initializes has no effect.
	(setq exwm-input-global-keys
		  `(
			;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
			([?\s-r] . exwm-reset)

			;; Move between windows
			([s-left] . windmove-left)
			([s-right] . windmove-right)
			([s-up] . windmove-up)
			([s-down] . windmove-down)

			;; Launch applications via shell command
			([?\s-d] . (lambda (command)
						 (interactive (list (read-shell-command "$ ")))
						 (start-process-shell-command command nil command)))

			;; Switch workspace
			([?\s-w] . exwm-workspace-switch)

			;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
			,@(mapcar (lambda (i)
						`(,(kbd (format "s-%d" i)) .
						  (lambda ()
							(interactive)
							(exwm-workspace-switch-create ,i))))
					  (number-sequence 0 9))

			,@(mapcar (lambda (i)
						`(,(kbd (format "S-s-%d" i)) .
						  (lambda ()
							(interactive)
							(exwm-workspace-move-window ,i))))
					  (number-sequence 0 9))))

	(exwm-systemtray-mode 0)
	(exwm-enable))
#+end_src

** COMMENT Desktop Environment

#+begin_src emacs-lisp
  (use-package desktop-environment
    :after exwm
    :config
    ;; (desktop-environment-brightness-small-increment "2%+")
    ;; (desktop-environment-brightness-small-decrement "2%-")
    ;; (desktop-environment-brightness-normal-increment "5%+")
    ;; (desktop-environment-brightness-normal-decrement "5%-")
    (desktop-environment-mode))
#+end_src

** COMMENT Remove all advices

#+begin_src emacs-lisp
  (defun advice-remove-all (sym)
    "Remove all advices from symbol SYM."
    (interactive "aFunction symbol:")
    (advice-mapc `(lambda (fun props)
                    (advice-remove ,(quote sym) fun))
                 sym))
#+end_src

* Org Config
** Org directory

#+begin_src emacs-lisp
  (setq org-directory "~/Sync/Org")
#+end_src
    
** Org source block - open in the same window

Open ~C-c '~ in the same window

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

** Org indirect buffer - open in the same window

#+begin_src emacs-lisp
  (setq org-indirect-buffer-display 'current-window)
#+end_src

** Org refile - save all buffers

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-outline-path-complete-in-steps t)
    (setq org-refile-targets nil)
    (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

** Org priority - face and default value


- [#A] Urgent

Stop whatever you are doing to do this.

- [#B] Next

Tasks you should do when you finish what is in progress.

- [#C] Maybe

Tasks to reconsider in the future if it should be done.

- [#D] "Stuff" (default)

I use this only to differenciate delayed [#C] and default [#D]

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-priority-highest ?A)
    (setq org-priority-lowest ?D)
    (setq org-priority-default ?D)
    (setq org-priority-faces
          ;; nil
          '((?A . (:foreground "gray"))
            (?B . (:foreground "gray"))
            (?C . (:foreground "gray"))
            (?D . (:foreground "gray")))
          ))
#+end_src

** Org tags - column

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-tags-column -90)
#+end_src

** Org TODOs - keywords and state logging

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-log-into-drawer t)
    (setq org-log-done nil)
    (setq org-log-reschedule t)
    (setq org-log-redeadline t)
    (setq org-hierarchical-todo-statistics t) ;; TODO cookie count not recursive
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n!)" "WAIT(w@)" "|" "DONE(d!)" "CANC(c@)")
            (sequence "PROJ(p)" "|" "FINI(f!)")))
    :bind
    ;; the keybindings are the same, just made them global
    (("C-c C-x C-o" . org-clock-out)
     ("C-c C-x C-j" . org-clock-goto)))
#+end_src

*** COMMENT whut
#+begin_src emacs-lisp
  (defun my/clocktable-write (&rest args)
    (apply #'org-clocktable-write-default args)
    (save-excursion
      (forward-char)
      (org-table-move-column-right)
      (org-table-move-column-right)))

  (setq org-duration-format 'h:mm)
#+end_src


*** COMMENT C-c C-c

C-c C-c over a TODO item calls =org-todo= instead of =org-set-tags-command=.

#+begin_src emacs-lisp
  (advice-add 'org-ctrl-c-ctrl-c
              :around
              (lambda (orig-fun &rest args)
                (if (and
                     (org-get-heading t t t t)
                     (org-get-todo-state))
                    ;; its a to-do item
                    (org-todo)
                  ;; its not a to-do item
                  (apply orig-fun args))))
#+end_src

** Org Clock - keybindings

#+begin_src emacs-lisp
  (use-package org
    :bind
    (("C-c C-x C-o" . org-clock-out)
     ("C-c C-x C-j" . org-clock-goto)))
#+end_src

** Org Capture - templates

#+begin_src emacs-lisp
  (use-package org
    :bind
    (:map global-map
          ("C-c c" . org-capture))
    :config
    (setq org-capture-templates
          '(("c"
             "Capture to inbox"
             entry
             (file+headline "tasks.org" "Tasks")
             "* TODO %?\n%U")
            ("j" "Journal"
             entry
             (file+headline "journal.org" "Journal")
             "* %T - %?"))))
#+end_src

** Org lists - Replace ~-~ by ~•~ on unordered lists.

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
      '(("^ *\\([-]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** Org Agenda - setup and custom views

Custom agenda views, agenda settings, and so on.

#+begin_src emacs-lisp
  (defun my/org-agenda-show-all-dates ()
    (interactive)
    (setq org-agenda-show-all-dates
          (if org-agenda-show-all-dates nil t))
    (org-agenda-redo))

  (defun my/org-agenda-breadcrumb ()
    (let ((parent (cdr (org-get-outline-path))))
      (if parent
          (format "[%s] " (mapconcat 'identity parent " > "))
        "")))


  (use-package org
    :init
    (setq org-scheduled-past-days 100
          org-agenda-start-with-log-mode nil
          org-agenda-window-setup 'current-window
          org-agenda-block-separator ?―
          org-agenda-start-day nil
          org-agenda-tags-column 'auto
          org-agenda-span 1
          org-agenda-show-all-dates nil
          org-agenda-skip-deadline-if-done t
          org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2)
          org-agenda-skip-scheduled-if-done nil
          org-deadline-warning-days 3
          org-agenda-start-with-follow-mode nil
          org-agenda-compact-blocks nil
          org-agenda-use-time-grid t
          org-agenda-skip-archived-trees nil
          org-agenda-current-time-string "←"
          org-agenda-files '("tasks.org")
          org-agenda-log-mode-items '(closed state)
          org-stuck-projects '("TODO=\"PROJ\"" ("NEXT" "WAIT") nil "")
          org-agenda-scheduled-leaders '("" "")
          org-agenda-deadline-leaders '("" "")

          org-agenda-todo-keyword-format "%s"
          org-agenda-prefix-format '((agenda . "  %-12t %s %(my/org-agenda-breadcrumb)")
                                     (todo . "  %(my/org-agenda-breadcrumb)")
                                     (tags . "  %(my/org-agenda-breadcrumb)")
                                     (search . "  %(my/org-agenda-breadcrumb)"))

          org-agenda-time-grid
          '((daily today require-timed)
            (800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200)
            " ┄┄┄┄┄ " "")

          org-agenda-custom-commands
          '(("p" "Projects"
             ((todo "PROJ"
                        ((org-agenda-overriding-header "Projects")))
             ))
            ("a" "Agenda"
             ((agenda ""
                      ((org-agenda-span 10)
                       (org-scheduled-past-days 100)
                       (org-deadline-warning-days 10)))))
            ("d" "To-do"
             ((agenda ""
                      ((org-agenda-span 'day)
                       (org-agenda-time-grid '((daily today require-timed)
                          ()
                          " ┄┄┄┄┄ " ""))))
              (tags-todo "+PRIORITY=\"A\""
                         ((org-agenda-overriding-header "Urgent")))
              (tags-todo "-TODO=\"WAIT\"-PRIORITY=\"C\""
                         ((org-agenda-overriding-header "In progress")
                          (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'notregexp "CLOCK: \\[." 'scheduled))))
              (todo "WAIT"
                    ((org-agenda-overriding-header "Waiting")
                     (org-agenda-sorting-strategy '(alpha-up))))
              (todo "NEXT"
                         ((org-agenda-overriding-header "Next Actions")
                          (org-agenda-sorting-strategy '(alpha-up))
                          (org-agenda-skip-function
                           '(org-agenda-skip-entry-if
                             'regexp "CLOCK: \\[."
                             'scheduled))))
              (tags-todo "+TODO=\"TODO\"+PRIORITY=\"D\"+LEVEL=2"
                         ((org-agenda-overriding-header "Stuff")
                          (org-agenda-skip-function
                           '(org-agenda-skip-entry-if
                             'regexp "CLOCK: \\[."
                             'scheduled 'done))))
              (tags-todo "+PRIORITY=\"C\"+LEVEL=2"
                         ((org-agenda-overriding-header "Later")
                          (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'scheduled 'done))))))
            ("w" "Agenda"
             ((agenda ""
                      ((org-agenda-files '("work.org"))
                       (org-agenda-span 100)
                       (org-scheduled-past-days 0)
                       (org-deadline-warning-days 0)))))
            ("e" "Tasks by effort"
             ((tags-todo "-TODO=\"DONE\"-TODO=\"FINI\"+Effort>\"\""
                         ((org-agenda-overriding-header "Tasks by effort")
                          (org-agenda-sorting-strategy '(effort-up))
                          (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'scheduled))
                          (org-agenda-prefix-format '((tags . "%-5e - ")))))))
            ("E" "Tasks without effort"
             ((tags-todo "+TODO=\"TODO\"+Effort=\"\""
                         ((org-agenda-overriding-header "Tasks without effort")
                          (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'scheduled))))))))

    (custom-set-faces
     '(org-agenda-current-time ((t (:foreground "green" :weight bold)))))

    :bind
    ((:map global-map
           ("C-c a" . org-agenda)
           ("C-'" . org-cycle-agenda-files))
     (:map org-agenda-mode-map
           ("C-a" . my/org-agenda-show-all-dates)
           ("j" . org-agenda-next-line)
           ("C-j" . org-agenda-goto-date)
           ("h" . org-agenda-earlier)
           ("l" . org-agenda-later)
           ("C-d" . evil-scroll-down)
           ("C-w C-w" . evil-window-next)
           ("C-u" . evil-scroll-up)
           ("M-g" . org-agenda-toggle-time-grid)
           ("{" . org-agenda-backward-block)
           ("}" . org-agenda-forward-block)
           ("z" . evil-scroll-line-to-center)
           ("g" . evil-goto-first-line)
           ("G" . evil-goto-line)
           ("k" . org-agenda-previous-line))))
#+end_src

*** COMMENT Example agenda

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-agenda-files '("exemplo.org")))
#+end_src

** Org Agenda - notifications for events

#+begin_src emacs-lisp
  (use-package emacs
    :after notifications
    :config
    (setq appt-message-warning-time 60
          appt-display-interval 10
          appt-display-mode-line nil)

    (setq appt-disp-window-function
          (lambda (remaining new-time msg)
            (notifications-notify
             :title (format "In %s minutes" remaining)
             :body msg
             :urgency 'critical)))

    (advice-add 'appt-check :before
                (lambda (&rest args)
                  (org-agenda-to-appt t)))
    (appt-activate t))
#+end_src

** COMMENT Change title and heading sizes.

#+begin_src emacs-lisp
  (defvar my/org-big-fonts '((org-document-title . 1.8)
                             (org-level-1 . 1.6)
                             (org-level-2 . 1.4)
                             (org-level-3 . 1.2)))
  (defun my/org-big ()
    (interactive)
    (dolist (face my/org-big-fonts)
      (set-face-attribute (car face) nil :height (cdr face))))

  (defun my/org-smol ()
    (interactive)
    (dolist (face my/org-big-fonts)
      (set-face-attribute (car face) nil :height 1.0)))
#+end_src

** COMMENT Whether to hide or not symbols for emphasis like ~a~, *b*, /c/...

#+begin_src emacs-lisp
 (setq org-hide-emphasis-markers nil)
#+end_src

** COMMENT Org Sort

#+begin_src emacs-lisp
  (defun my/org-sort ()
    (interactive)
    (org-sort-entries nil ?T)
    (org-sort-entries nil ?p)
    (org-sort-entries nil ?o))
#+end_src

** COMMENT Sparse Tree

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-sparse-tree-default-date-type 'active))
#+end_src

** COMMENT Fold drawer

#+begin_src emacs-lisp
  (defun my/org-fold-hide-drawer-all ()
    (interactive)
    (org-fold-hide-drawer-all))
#+end_src

** COMMENT Org - Habit

#+begin_src emacs-lisp
  (use-package org
    :config
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60))
#+end_src

** COMMENT Tables

#+begin_src emacs-lisp
  (use-package org
    :bind
    (:map org-mode-map
          ("C-c h" . org-table-move-cell-left)
          ("C-c l" . org-table-move-cell-right)
          ("C-c k" . org-table-move-cell-up)
          ("C-c j" . org-table-move-cell-down)))
#+end_src

** TODO COMMENT color calendar

#+begin_src emacs-lisp
  (defadvice calendar-generate-month
      (after highlight-weekend-days (month year indent) activate)
    "Highlight weekend days"
    (dotimes (i 31)
      (let ((date (list month (1+ i) year))
            (count (length (org-agenda-get-day-entries
                            "~/Git/Org/tasks.org" (list month (1+ i) year)))))
        (unless (= count 0)
          (calendar-mark-visible-date date)))))
#+end_src


** =org-present= - make presentations using org mode

#+begin_src emacs-lisp
  (use-package org-present
    :defer
    :hook ((org-present-mode
            . (lambda ()
                (org-present-hide-cursor)
				(setq display-line-numbers-type nil)
                (display-line-numbers-mode 1)))
           (org-present-mode-quit
            . (lambda ()
                (org-present-show-cursor)
				(setq display-line-numbers-type 'relative)
                (display-line-numbers-mode 1)))))
#+end_src

** =org-drill= - same idea as Anki

#+begin_src emacs-lisp
  (use-package org-drill
    :config
    (add-to-list 'org-modules 'org-drill))

  (advice-add 'org-drill-time-to-inactive-org-timestamp :override
              (lambda (time)
                "Convert TIME into org-mode timestamp."
                (format-time-string
                 (concat "[" (cdr org-time-stamp-formats) "]")
                 time)))
#+end_src

** =toc-org= - generate table of contents

Useful for github that doesn't create a TOC automatically

#+begin_src emacs-lisp
  (use-package toc-org
    :hook
    (org-mode . toc-org-mode))
#+end_src

** =org-music= - manage songs and playlists using org

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")

  (defun my/org-music-play-song-at-point ()
    (interactive)
    (org-music-play-song-at-point))


  (require 'org-music) ;; idk why it only works that way

  (use-package org-music
    :load-path "lisp/org-music.el"
    :after emms
    :init
    (setq
     org-music-file nil
     org-music-youtube-downloader "yt-dlp"
     org-music-media-directory "~/.cache/org-music"
     org-music-operating-system "linux"
     org-music-cache-size (* 10 1024)) ;; 10 GB?

    :bind
    (:map evil-normal-state-map
          ("SPC m p l" . org-music-play-list)
          ("SPC m p p" . my/org-music-play-song-at-point)))
#+end_src
** =org-indent-mode= (builtin) - visually indent text inside headings

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . org-indent-mode))
#+end_src

** =org-appear= - show emphasis markers when cursor is over the word.

#+begin_src emacs-lisp
  (use-package org-appear
      :hook
      (org-mode . org-appear-mode))
#+end_src

** =org-fragtog= - display LaTeX automatically inside org buffers

#+begin_src emacs-lisp
  (use-package org-fragtog
    :after org
    :hook
    (org-mode . org-fragtog-mode)
    :custom
    (org-startup-with-latex-preview t)
    :custom
    (org-format-latex-options
     (plist-put org-format-latex-options :scale 2)
     (plist-put org-format-latex-options :foreground 'auto)
     (plist-put org-format-latex-options :background 'auto)))
#+end_src

** =org-roam= - org knowledge management system

#+begin_src emacs-lisp
  (use-package org-roam
    :defer
    :config
    (when (not (file-directory-p "~/Sync/Org/Roam"))
      (make-directory "~/Sync/Org/Roam"))
    (setq org-roam-directory "~/Sync/Org/Roam")

    (org-roam-db-autosync-enable)

    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)))
#+end_src

** =org-roam-ui= - visualize Org Roam graph in real time.

#+begin_src emacs-lisp
  (use-package org-roam-ui :defer)
#+end_src

** COMMENT =org-bullets= - show headings with special bullets instead of asterisks

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

Visually indent text inside headings.

